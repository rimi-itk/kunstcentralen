# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    'env(DEFAULT_LOCALE)': da
    default_locale: '%env(DEFAULT_LOCALE)%'
    app.path.works_of_art: /uploads/images/works_of_art
    router.request_context.scheme: '%env(REQUEST_CONTEXT_SCHEME)%'
    router.request_context.host: '%env(REQUEST_CONTEXT_HOST)%'
    router.request_context.base_url: '%env(REQUEST_CONTEXT_BASE_URL)%'
    asset.request_context.base_path: '%router.request_context.base_url%'
    asset.request_context.secure: '%env(bool:ASSET_REQUEST_CONTEXT_SECURE)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Serializer\ApiNormalizer:
        decorates: 'api_platform.jsonld.normalizer.item'
        arguments:
            $decorated: '@App\Serializer\ApiNormalizer.inner'

    App\EventListener\ImagesListener:
        tags:
            - { name: doctrine.event_listener, event: prePersist }
            - { name: doctrine.event_listener, event: preUpdate }

    Liip\ImagineBundle\Imagine\Filter\FilterManager: '@liip_imagine.filter.manager'
    Liip\ImagineBundle\Imagine\Data\DataManager: '@liip_imagine.data.manager'
